{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","aliceSprite","useRef","foreground","background","useLayoutEffect","alice","current","animate","transform","easing","direction","duration","playbackRate","iterations","Infinity","setInterval","adjustSceneryPlayback","sceneryFrames","sceneryTimingBackground","sceneryTimingForeground","sceneries","console","log","forEach","anim","window","addEventListener","className","ref","src","alt","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAuGeA,MArGf,WAEE,IAAMC,EAAcC,iBAAO,MACrBC,EAAaD,iBAAO,MACpBE,EAAaF,iBAAO,MA0E1B,OAxEAG,2BAAgB,WAEZ,IAKIC,EAAQL,EAAYM,QAAQC,QALb,CACjB,CAAEC,UAAW,iBACb,CAAEA,UAAW,sBAIC,CACZC,OAAQ,gBACRC,UAAW,UACXC,SAAU,IACVC,aAAc,EACdC,WAAYC,MAGhBC,aAAa,WACPV,EAAMO,aAAe,KACvBP,EAAMO,cAAgB,GACtBI,OAED,KAGH,IAAIC,EAAkB,CACpB,CAAET,UAAW,oBACb,CAAEA,UAAW,sBAGXU,EAA0B,CAC5BP,SAAU,KACVE,WAAYC,KAGVK,EAA0B,CAC5BR,SAAU,KACVE,WAAYC,KAMVM,EAAY,CAHSlB,EAAWI,QAAQC,QAAQU,EAAeE,GAC1ChB,EAAWG,QAAQC,QAAQU,EAAeC,IAI/DF,EAAwB,WAC1BK,QAAQC,IAAIjB,EAAMO,cACdP,EAAMO,aAAe,GACvBQ,EAAUG,SAAQ,SAASC,GACzBA,EAAKZ,aAAeP,EAAMO,aAAa,GAAK,KAErCP,EAAMO,aAAe,IAC9BQ,EAAUG,SAAQ,SAASC,GACzBA,EAAKZ,aAAeP,EAAMO,aAAa,KAGzCQ,EAAUG,SAAQ,SAASC,GACzBA,EAAKZ,aAAe,MAI1BI,IAOAS,OAAOC,iBAAiB,SALP,WACfrB,EAAMO,cAAgB,GACtBI,UASJ,yBAAKW,UAAU,aACb,yBAAKA,UAAU,QAEf,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cAAcC,IAAK5B,EAAa6B,IAAI,wFAAwFC,IAAI,QALvJ,IASE,yBAAKH,UAAU,UAAUI,GAAG,aAAaH,IAAK1B,GAC5C,yBAAK6B,GAAG,WAAWF,IAAI,mEAAmEC,IAAI,OAGhG,yBAAKH,UAAU,sBAAsBC,IAAKzB,GACxC,yBAAKwB,UAAU,OAAOE,IAAI,4EAA4EC,IAAI,MAC1G,yBAAKH,UAAU,QAAQE,IAAI,4EAA4EC,IAAI,MAC3G,yBAAKH,UAAU,WAAWE,IAAI,mEAAmEC,IAAI,SCrFzFE,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.2100a3ad.chunk.js","sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport './App.css';\nfunction App() {\n\n  const aliceSprite = useRef(null);\n  const foreground = useRef(null);\n  const background = useRef(null);\n\n  useLayoutEffect(() => {\n    // Alice\n      var spriteFrames = [\n        { transform: 'translateY(0)' },\n        { transform: 'translateY(-100%)' }   \n      ];\n\n      var alice = aliceSprite.current.animate(\n        spriteFrames, {\n          easing: 'steps(7, end)',\n          direction: \"reverse\",\n          duration: 500,\n          playbackRate: 1,\n          iterations: Infinity\n        });\n\n      setInterval( function() {\n        if (alice.playbackRate > .4) {\n          alice.playbackRate -= .1;\n          adjustSceneryPlayback();\n        } \n      }, 3000);\n\n    // Scenery\n      var sceneryFrames =   [\n        { transform: 'translateX(100%)' },\n        { transform: 'translateX(-100%)' }   \n      ];\n      \n      var sceneryTimingBackground = {\n        duration: 36000,\n        iterations: Infinity\n      };\n      \n      var sceneryTimingForeground = {\n        duration: 12000,\n        iterations: Infinity\n      };\n\n      var foregroundMovement = foreground.current.animate(sceneryFrames, sceneryTimingForeground);\n      var backgroundMovement = background.current.animate(sceneryFrames, sceneryTimingBackground);\n\n      var sceneries = [foregroundMovement, backgroundMovement];\n\n      var adjustSceneryPlayback = function() {\n        console.log(alice.playbackRate)\n        if (alice.playbackRate < .8) {\n          sceneries.forEach(function(anim) {\n            anim.playbackRate = alice.playbackRate/2 * -1;\n          });\n        } else if (alice.playbackRate > 1.2) {\n          sceneries.forEach(function(anim) {\n            anim.playbackRate = alice.playbackRate/2;\n          });\n        } else {\n          sceneries.forEach(function(anim) {\n            anim.playbackRate = 0;    \n          });\n        }   \n      }\n      adjustSceneryPlayback();\n\n      const goFaster = () => {\n        alice.playbackRate += 0.1;\n        adjustSceneryPlayback();\n      }\n  \n      window.addEventListener(\"click\", goFaster);\n  })\n\n  \n  \n  return (\n    <div className=\"container\">\n      <div className=\"sky\"></div>\n      \n      <div className=\"earth\">\n        <div className=\"alice\">\n            <img className=\"alicesprite\" ref={aliceSprite} src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/sprite_running-alice-queen_small.png\" alt=\" \" />\n        </div>\n      </div>>\n      \n      <div className=\"scenery\" id=\"foreground\" ref={foreground}>\n        <img id=\"treefore\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm3_small.png\" alt=\" \"/>\n      </div>\n\n      <div className=\"scenery background1\" ref={background}>\n        <img className=\"pawn\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_pawn_upright_small.png\" alt=\" \" />\n        <img className=\"pawn2\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/r_pawn_upright_small.png\" alt=\" \" />\n        <img className=\"treeback\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/641/palm1_small.png\" alt=\" \" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}